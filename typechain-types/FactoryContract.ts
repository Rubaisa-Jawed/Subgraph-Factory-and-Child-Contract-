/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FactoryContractInterface extends utils.Interface {
  functions: {
    "children(uint256)": FunctionFragment;
    "createChild(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "children",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createChild",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "children", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createChild",
    data: BytesLike
  ): Result;

  events: {
    "ChildCreated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChildCreated"): EventFragment;
}

export type ChildCreatedEvent = TypedEvent<
  [string, BigNumber],
  { childAddress: string; data: BigNumber }
>;

export type ChildCreatedEventFilter = TypedEventFilter<ChildCreatedEvent>;

export interface FactoryContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    children(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    createChild(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  children(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  createChild(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    children(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    createChild(data: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ChildCreated(address,uint256)"(
      childAddress?: null,
      data?: null
    ): ChildCreatedEventFilter;
    ChildCreated(childAddress?: null, data?: null): ChildCreatedEventFilter;
  };

  estimateGas: {
    children(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    createChild(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    children(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createChild(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
